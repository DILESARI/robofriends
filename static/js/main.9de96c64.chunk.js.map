{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robotcillos","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","searchBoxChange","quePaso","searchField","target","value","robotos","fetch","then","response","json","usuarios","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAiBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAErB,OAEI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,wBAAwBC,IAAG,+BAA0BL,EAA1B,cACpC,6BAEA,4BAAKC,GACL,2BAAIC,MCyBDI,EAjCE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAWf,OAEI,6BAGQA,EAAYC,KAAI,SAACC,EAAKC,GAElB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCTzBU,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OAEX,2BACIA,UAAU,mCACVW,KAAK,OACLC,YAAY,gBACZC,SAAUH,MCCXI,EATA,SAACC,GAEZ,OACI,yBAAKC,MAAS,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCeJC,E,kDAlBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAOG,KAAKJ,MAAMC,SACd,wDACAG,KAAKX,MAAMK,a,GAfIQ,aC4EZC,G,wDA/DX,aAAe,IAAD,8BACV,gBAiBJC,gBAAkB,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAYD,EAAQE,OAAOC,SAjB1C,EAAKZ,MAAQ,CAETa,QAAS,GACTH,YAAa,IALP,E,gEASE,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GAAQ,OAAI,EAAKb,SAAS,CAACQ,QAAQK,S,+BAiBjC,IAAD,OACEC,EAAiBf,KAAKJ,MAAMa,QAAQO,QAAO,SAAAC,GAC7C,OACIA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKvB,MAAMU,YAAYY,kBAIjE,OAAkC,IAA9BlB,KAAKJ,MAAMa,QAAQW,OAEf,6BACA,wBAAI9C,UAAU,kBAAd,eACA,wBAAIA,UAAU,UAAd,eAMA,yBAAKA,UAAU,MACX,wBAAIA,UAAU,WAAd,eACA,kBAAC,EAAD,CAAWU,aAAgBgB,KAAKI,kBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KAEI,kBAAC,EAAD,CAAU1B,YAAcqC,W,GAvDlCb,cCFEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OASFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.9de96c64.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    // const {id, name, email} = propiedades;\n    return(\n        // <h1>Robofriends</h1>\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='error cargando imagen' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n            {/* <h2>{propiedades.name}</h2> */}\n            <h2>{name}</h2>\n            <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robotcillos}) => {\n//     const cardComponent = robots.map((user,i)=>{\n//         // para cada user de robots, haga lo siguiente\n//         return (\n//         <Card key={i} \n//         id={user.id} \n//         name={user.name} \n//         email={user.email}/>);\n//         // is a good practice include a key for each element in the array\n//     })\n    \n    return (\n        \n        <div>\n            {/* {cardComponent} */}\n            {\n                robotcillos.map((user,i)=>{\n                    // para cada user de robots, haga lo siguiente\n                    return (\n                        <Card \n                            key={i} \n                            id={user.id} \n                            name={user.name} \n                            email={user.email}\n\n                        />\n                    );\n                }) \n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n        {/* in className you can add every tachyons */}\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type=\"text\" \n                placeholder=\"Please search\"\n                onChange={searchChange}\n                \n            />\n        </div>    \n    )   \n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    // console.log(props);\n    return (\n        <div style = {{overflow: 'scroll', border: '0px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        return this.state.hasError?\n            <h1>Ooops.  Thas is not good</h1>:\n            this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\n// import {ensayo} from './ensayo';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n// const state = {\n//     robots: robots,\n//     searchfiel: '',\n// }\n\n// const App = () =>{\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            // robotos: ensayo,\n            robotos: [],\n            searchField: '',\n        }\n    }\n\ncomponentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n        return response.json();\n    })\n    .then (usuarios => this.setState({robotos:usuarios}))\n    \n}\n\n    searchBoxChange = (quePaso) => {\n        this.setState({searchField:quePaso.target.value})\n        // console.log(quePaso.target.value);\n        \n        // move this part to the render\n        // const filteredRobots = this.state.robots.filter(robot => {\n        //     return (\n        //         robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n        //     )\n        // })\n        // console.log(filteredRobots);\n    }\n\n    render(){\n        const filteredRobots = this.state.robotos.filter(robot => {\n            return (\n                robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n            )\n        })\n        \n        if (this.state.robotos.length === 0){\n            return (\n                <div>\n                <h1 className='tc pa2 f1 grow'>ROBOFRIENDS</h1>\n                <h3 className='pa2 f4'>Loading...</h3>\n                </div>\n            )\n           \n        }else{\n            return (\n                <div className='tc'>\n                    <h1 className='f1 grow'>ROBOFRIENDS</h1>\n                    <SearchBox searchChange = {this.searchBoxChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            {/* <CardList robots={robots}/> */}\n                            <CardList robotcillos ={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n        }\n    }    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card'; \n// import CardList from './CardList';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <CardList robots={robots}/> */}\n    {/* <div>\n      <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n      <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n      <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n      <Card id={robots[3].id} name={robots[3].name} email={robots[3].email}/>\n    </div> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}